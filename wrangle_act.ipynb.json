{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "# Project 5: Wrangle & Analyze Data\n",
    "\n",
    "###  Contents:\n",
    "\n",
    "- Introduction.\n",
    "- Gathering Data.\n",
    "- Assessing Data.\n",
    "- Cleaning data. \n",
    "- Analyzing and Visualizing Data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Introduction\n",
    "\n",
    "\n",
    "Genuine data infrequently confesses all. Utilizing Python and its libraries, you will accumulate data from an assortment of sources and in an assortment of organizations, survey its quality and neatness, at that point clean it. This is called information fighting. You will archive your fighting endeavors in a Jupyter Journal, in addition to feature them through investigations and perceptions utilizing Python (and its libraries) as well as SQL"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: tweepy in /opt/anaconda3/lib/python3.7/site-packages (3.9.0)\n",
      "Requirement already satisfied: requests[socks]>=2.11.1 in /opt/anaconda3/lib/python3.7/site-packages (from tweepy) (2.22.0)\n",
      "Requirement already satisfied: six>=1.10.0 in /opt/anaconda3/lib/python3.7/site-packages (from tweepy) (1.14.0)\n",
      "Requirement already satisfied: requests-oauthlib>=0.7.0 in /opt/anaconda3/lib/python3.7/site-packages (from tweepy) (1.3.0)\n",
      "Requirement already satisfied: chardet<3.1.0,>=3.0.2 in /opt/anaconda3/lib/python3.7/site-packages (from requests[socks]>=2.11.1->tweepy) (3.0.4)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /opt/anaconda3/lib/python3.7/site-packages (from requests[socks]>=2.11.1->tweepy) (2019.11.28)\n",
      "Requirement already satisfied: idna<2.9,>=2.5 in /opt/anaconda3/lib/python3.7/site-packages (from requests[socks]>=2.11.1->tweepy) (2.8)\n",
      "Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /opt/anaconda3/lib/python3.7/site-packages (from requests[socks]>=2.11.1->tweepy) (1.25.8)\n",
      "Requirement already satisfied: PySocks!=1.5.7,>=1.5.6; extra == \"socks\" in /opt/anaconda3/lib/python3.7/site-packages (from requests[socks]>=2.11.1->tweepy) (1.7.1)\n",
      "Requirement already satisfied: oauthlib>=3.0.0 in /opt/anaconda3/lib/python3.7/site-packages (from requests-oauthlib>=0.7.0->tweepy) (3.1.0)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install tweepy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from pandas import Series, DataFrame\n",
    "import csv \n",
    "import requests\n",
    "import tweepy\n",
    "import json\n",
    "import re\n",
    "from datetime import date\n",
    "import datetime as dt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Gathering Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"twitter-archive-enhanced-2.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>in_reply_to_status_id</th>\n",
       "      <th>in_reply_to_user_id</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>source</th>\n",
       "      <th>text</th>\n",
       "      <th>retweeted_status_id</th>\n",
       "      <th>retweeted_status_user_id</th>\n",
       "      <th>retweeted_status_timestamp</th>\n",
       "      <th>expanded_urls</th>\n",
       "      <th>rating_numerator</th>\n",
       "      <th>rating_denominator</th>\n",
       "      <th>name</th>\n",
       "      <th>doggo</th>\n",
       "      <th>floofer</th>\n",
       "      <th>pupper</th>\n",
       "      <th>puppo</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1068</th>\n",
       "      <td>740373189193256964</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2016-06-08 02:41:38 +0000</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>After so many requests, this is Bretagne. She ...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://twitter.com/dog_rates/status/740373189...</td>\n",
       "      <td>9</td>\n",
       "      <td>11</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>648</th>\n",
       "      <td>793120401413079041</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2016-10-31 16:00:13 +0000</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Robin. She's desperately trying to do ...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://twitter.com/dog_rates/status/793120401...</td>\n",
       "      <td>11</td>\n",
       "      <td>10</td>\n",
       "      <td>Robin</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>981</th>\n",
       "      <td>749417653287129088</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2016-07-03 01:41:06 +0000</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Finn. He's the most unphotogenic puppe...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://twitter.com/dog_rates/status/749417653...</td>\n",
       "      <td>11</td>\n",
       "      <td>10</td>\n",
       "      <td>Finn</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>pupper</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>886680336477933568</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2017-07-16 20:14:00 +0000</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Derek. He's late for a dog meeting. 13...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://twitter.com/dog_rates/status/886680336...</td>\n",
       "      <td>13</td>\n",
       "      <td>10</td>\n",
       "      <td>Derek</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>535</th>\n",
       "      <td>807059379405148160</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2016-12-09 03:08:45 +0000</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>RT @dog_rates: This is Cali. She arrived preas...</td>\n",
       "      <td>7.829691e+17</td>\n",
       "      <td>4.196984e+09</td>\n",
       "      <td>2016-10-03 15:42:44 +0000</td>\n",
       "      <td>https://twitter.com/dog_rates/status/782969140...</td>\n",
       "      <td>12</td>\n",
       "      <td>10</td>\n",
       "      <td>Cali</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                tweet_id  in_reply_to_status_id  in_reply_to_user_id  \\\n",
       "1068  740373189193256964                    NaN                  NaN   \n",
       "648   793120401413079041                    NaN                  NaN   \n",
       "981   749417653287129088                    NaN                  NaN   \n",
       "28    886680336477933568                    NaN                  NaN   \n",
       "535   807059379405148160                    NaN                  NaN   \n",
       "\n",
       "                      timestamp  \\\n",
       "1068  2016-06-08 02:41:38 +0000   \n",
       "648   2016-10-31 16:00:13 +0000   \n",
       "981   2016-07-03 01:41:06 +0000   \n",
       "28    2017-07-16 20:14:00 +0000   \n",
       "535   2016-12-09 03:08:45 +0000   \n",
       "\n",
       "                                                 source  \\\n",
       "1068  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "648   <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "981   <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "28    <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "535   <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "\n",
       "                                                   text  retweeted_status_id  \\\n",
       "1068  After so many requests, this is Bretagne. She ...                  NaN   \n",
       "648   This is Robin. She's desperately trying to do ...                  NaN   \n",
       "981   This is Finn. He's the most unphotogenic puppe...                  NaN   \n",
       "28    This is Derek. He's late for a dog meeting. 13...                  NaN   \n",
       "535   RT @dog_rates: This is Cali. She arrived preas...         7.829691e+17   \n",
       "\n",
       "      retweeted_status_user_id retweeted_status_timestamp  \\\n",
       "1068                       NaN                        NaN   \n",
       "648                        NaN                        NaN   \n",
       "981                        NaN                        NaN   \n",
       "28                         NaN                        NaN   \n",
       "535               4.196984e+09  2016-10-03 15:42:44 +0000   \n",
       "\n",
       "                                          expanded_urls  rating_numerator  \\\n",
       "1068  https://twitter.com/dog_rates/status/740373189...                 9   \n",
       "648   https://twitter.com/dog_rates/status/793120401...                11   \n",
       "981   https://twitter.com/dog_rates/status/749417653...                11   \n",
       "28    https://twitter.com/dog_rates/status/886680336...                13   \n",
       "535   https://twitter.com/dog_rates/status/782969140...                12   \n",
       "\n",
       "      rating_denominator   name doggo floofer  pupper puppo  \n",
       "1068                  11   None  None    None    None  None  \n",
       "648                   10  Robin  None    None    None  None  \n",
       "981                   10   Finn  None    None  pupper  None  \n",
       "28                    10  Derek  None    None    None  None  \n",
       "535                   10   Cali  None    None    None  None  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.sample(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2356 entries, 0 to 2355\n",
      "Data columns (total 17 columns):\n",
      " #   Column                      Non-Null Count  Dtype  \n",
      "---  ------                      --------------  -----  \n",
      " 0   tweet_id                    2356 non-null   int64  \n",
      " 1   in_reply_to_status_id       78 non-null     float64\n",
      " 2   in_reply_to_user_id         78 non-null     float64\n",
      " 3   timestamp                   2356 non-null   object \n",
      " 4   source                      2356 non-null   object \n",
      " 5   text                        2356 non-null   object \n",
      " 6   retweeted_status_id         181 non-null    float64\n",
      " 7   retweeted_status_user_id    181 non-null    float64\n",
      " 8   retweeted_status_timestamp  181 non-null    object \n",
      " 9   expanded_urls               2297 non-null   object \n",
      " 10  rating_numerator            2356 non-null   int64  \n",
      " 11  rating_denominator          2356 non-null   int64  \n",
      " 12  name                        2356 non-null   object \n",
      " 13  doggo                       2356 non-null   object \n",
      " 14  floofer                     2356 non-null   object \n",
      " 15  pupper                      2356 non-null   object \n",
      " 16  puppo                       2356 non-null   object \n",
      "dtypes: float64(4), int64(3), object(10)\n",
      "memory usage: 313.0+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2356, 17)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "url = 'https://d17h27t6h515a5.cloudfront.net/topher/2017/August/599fd2ad_image-predictions/image-predictions.tsv'\n",
    "response = requests.get(url)\n",
    "\n",
    "with open('image_predictions.tsv', mode='wb') as file: file.write(response.content)\n",
    "\n",
    "image_predictions = pd.read_csv('image_predictions.tsv', sep='\\t')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2075 entries, 0 to 2074\n",
      "Data columns (total 12 columns):\n",
      " #   Column    Non-Null Count  Dtype  \n",
      "---  ------    --------------  -----  \n",
      " 0   tweet_id  2075 non-null   int64  \n",
      " 1   jpg_url   2075 non-null   object \n",
      " 2   img_num   2075 non-null   int64  \n",
      " 3   p1        2075 non-null   object \n",
      " 4   p1_conf   2075 non-null   float64\n",
      " 5   p1_dog    2075 non-null   bool   \n",
      " 6   p2        2075 non-null   object \n",
      " 7   p2_conf   2075 non-null   float64\n",
      " 8   p2_dog    2075 non-null   bool   \n",
      " 9   p3        2075 non-null   object \n",
      " 10  p3_conf   2075 non-null   float64\n",
      " 11  p3_dog    2075 non-null   bool   \n",
      "dtypes: bool(3), float64(3), int64(2), object(4)\n",
      "memory usage: 152.1+ KB\n"
     ]
    }
   ],
   "source": [
    "image_predictions.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>jpg_url</th>\n",
       "      <th>img_num</th>\n",
       "      <th>p1</th>\n",
       "      <th>p1_conf</th>\n",
       "      <th>p1_dog</th>\n",
       "      <th>p2</th>\n",
       "      <th>p2_conf</th>\n",
       "      <th>p2_dog</th>\n",
       "      <th>p3</th>\n",
       "      <th>p3_conf</th>\n",
       "      <th>p3_dog</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1622</th>\n",
       "      <td>803380650405482500</td>\n",
       "      <td>https://pbs.twimg.com/media/CyYub2kWEAEYdaq.jpg</td>\n",
       "      <td>1</td>\n",
       "      <td>bookcase</td>\n",
       "      <td>0.890601</td>\n",
       "      <td>False</td>\n",
       "      <td>entertainment_center</td>\n",
       "      <td>0.019287</td>\n",
       "      <td>False</td>\n",
       "      <td>file</td>\n",
       "      <td>0.009490</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>761</th>\n",
       "      <td>688894073864884227</td>\n",
       "      <td>https://pbs.twimg.com/media/CY9xf1dUAAE4XLc.jpg</td>\n",
       "      <td>1</td>\n",
       "      <td>hog</td>\n",
       "      <td>0.669996</td>\n",
       "      <td>False</td>\n",
       "      <td>guinea_pig</td>\n",
       "      <td>0.077347</td>\n",
       "      <td>False</td>\n",
       "      <td>hamster</td>\n",
       "      <td>0.062398</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1313</th>\n",
       "      <td>754747087846248448</td>\n",
       "      <td>https://pbs.twimg.com/media/CnlmeL3WgAA4c84.jpg</td>\n",
       "      <td>1</td>\n",
       "      <td>rotisserie</td>\n",
       "      <td>0.471493</td>\n",
       "      <td>False</td>\n",
       "      <td>cash_machine</td>\n",
       "      <td>0.250837</td>\n",
       "      <td>False</td>\n",
       "      <td>sliding_door</td>\n",
       "      <td>0.117872</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1210</th>\n",
       "      <td>742465774154047488</td>\n",
       "      <td>https://pbs.twimg.com/media/Ck3EribXEAAPhZn.jpg</td>\n",
       "      <td>1</td>\n",
       "      <td>web_site</td>\n",
       "      <td>0.997154</td>\n",
       "      <td>False</td>\n",
       "      <td>comic_book</td>\n",
       "      <td>0.000439</td>\n",
       "      <td>False</td>\n",
       "      <td>desktop_computer</td>\n",
       "      <td>0.000268</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>700</th>\n",
       "      <td>684800227459624960</td>\n",
       "      <td>https://pbs.twimg.com/media/CYDmK7ZVAAI_ylL.jpg</td>\n",
       "      <td>1</td>\n",
       "      <td>miniature_schnauzer</td>\n",
       "      <td>0.294457</td>\n",
       "      <td>True</td>\n",
       "      <td>Norfolk_terrier</td>\n",
       "      <td>0.161885</td>\n",
       "      <td>True</td>\n",
       "      <td>West_Highland_white_terrier</td>\n",
       "      <td>0.120992</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                tweet_id                                          jpg_url  \\\n",
       "1622  803380650405482500  https://pbs.twimg.com/media/CyYub2kWEAEYdaq.jpg   \n",
       "761   688894073864884227  https://pbs.twimg.com/media/CY9xf1dUAAE4XLc.jpg   \n",
       "1313  754747087846248448  https://pbs.twimg.com/media/CnlmeL3WgAA4c84.jpg   \n",
       "1210  742465774154047488  https://pbs.twimg.com/media/Ck3EribXEAAPhZn.jpg   \n",
       "700   684800227459624960  https://pbs.twimg.com/media/CYDmK7ZVAAI_ylL.jpg   \n",
       "\n",
       "      img_num                   p1   p1_conf  p1_dog                    p2  \\\n",
       "1622        1             bookcase  0.890601   False  entertainment_center   \n",
       "761         1                  hog  0.669996   False            guinea_pig   \n",
       "1313        1           rotisserie  0.471493   False          cash_machine   \n",
       "1210        1             web_site  0.997154   False            comic_book   \n",
       "700         1  miniature_schnauzer  0.294457    True       Norfolk_terrier   \n",
       "\n",
       "       p2_conf  p2_dog                           p3   p3_conf  p3_dog  \n",
       "1622  0.019287   False                         file  0.009490   False  \n",
       "761   0.077347   False                      hamster  0.062398   False  \n",
       "1313  0.250837   False                 sliding_door  0.117872   False  \n",
       "1210  0.000439   False             desktop_computer  0.000268   False  \n",
       "700   0.161885    True  West_Highland_white_terrier  0.120992    True  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "image_predictions.sample(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>jpg_url</th>\n",
       "      <th>img_num</th>\n",
       "      <th>p1</th>\n",
       "      <th>p1_conf</th>\n",
       "      <th>p1_dog</th>\n",
       "      <th>p2</th>\n",
       "      <th>p2_conf</th>\n",
       "      <th>p2_dog</th>\n",
       "      <th>p3</th>\n",
       "      <th>p3_conf</th>\n",
       "      <th>p3_dog</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>666020888022790149</td>\n",
       "      <td>https://pbs.twimg.com/media/CT4udn0WwAA0aMy.jpg</td>\n",
       "      <td>1</td>\n",
       "      <td>Welsh_springer_spaniel</td>\n",
       "      <td>0.465074</td>\n",
       "      <td>True</td>\n",
       "      <td>collie</td>\n",
       "      <td>0.156665</td>\n",
       "      <td>True</td>\n",
       "      <td>Shetland_sheepdog</td>\n",
       "      <td>0.061428</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>666029285002620928</td>\n",
       "      <td>https://pbs.twimg.com/media/CT42GRgUYAA5iDo.jpg</td>\n",
       "      <td>1</td>\n",
       "      <td>redbone</td>\n",
       "      <td>0.506826</td>\n",
       "      <td>True</td>\n",
       "      <td>miniature_pinscher</td>\n",
       "      <td>0.074192</td>\n",
       "      <td>True</td>\n",
       "      <td>Rhodesian_ridgeback</td>\n",
       "      <td>0.072010</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>666033412701032449</td>\n",
       "      <td>https://pbs.twimg.com/media/CT4521TWwAEvMyu.jpg</td>\n",
       "      <td>1</td>\n",
       "      <td>German_shepherd</td>\n",
       "      <td>0.596461</td>\n",
       "      <td>True</td>\n",
       "      <td>malinois</td>\n",
       "      <td>0.138584</td>\n",
       "      <td>True</td>\n",
       "      <td>bloodhound</td>\n",
       "      <td>0.116197</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>666044226329800704</td>\n",
       "      <td>https://pbs.twimg.com/media/CT5Dr8HUEAA-lEu.jpg</td>\n",
       "      <td>1</td>\n",
       "      <td>Rhodesian_ridgeback</td>\n",
       "      <td>0.408143</td>\n",
       "      <td>True</td>\n",
       "      <td>redbone</td>\n",
       "      <td>0.360687</td>\n",
       "      <td>True</td>\n",
       "      <td>miniature_pinscher</td>\n",
       "      <td>0.222752</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>666049248165822465</td>\n",
       "      <td>https://pbs.twimg.com/media/CT5IQmsXIAAKY4A.jpg</td>\n",
       "      <td>1</td>\n",
       "      <td>miniature_pinscher</td>\n",
       "      <td>0.560311</td>\n",
       "      <td>True</td>\n",
       "      <td>Rottweiler</td>\n",
       "      <td>0.243682</td>\n",
       "      <td>True</td>\n",
       "      <td>Doberman</td>\n",
       "      <td>0.154629</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             tweet_id                                          jpg_url  \\\n",
       "0  666020888022790149  https://pbs.twimg.com/media/CT4udn0WwAA0aMy.jpg   \n",
       "1  666029285002620928  https://pbs.twimg.com/media/CT42GRgUYAA5iDo.jpg   \n",
       "2  666033412701032449  https://pbs.twimg.com/media/CT4521TWwAEvMyu.jpg   \n",
       "3  666044226329800704  https://pbs.twimg.com/media/CT5Dr8HUEAA-lEu.jpg   \n",
       "4  666049248165822465  https://pbs.twimg.com/media/CT5IQmsXIAAKY4A.jpg   \n",
       "\n",
       "   img_num                      p1   p1_conf  p1_dog                  p2  \\\n",
       "0        1  Welsh_springer_spaniel  0.465074    True              collie   \n",
       "1        1                 redbone  0.506826    True  miniature_pinscher   \n",
       "2        1         German_shepherd  0.596461    True            malinois   \n",
       "3        1     Rhodesian_ridgeback  0.408143    True             redbone   \n",
       "4        1      miniature_pinscher  0.560311    True          Rottweiler   \n",
       "\n",
       "    p2_conf  p2_dog                   p3   p3_conf  p3_dog  \n",
       "0  0.156665    True    Shetland_sheepdog  0.061428    True  \n",
       "1  0.074192    True  Rhodesian_ridgeback  0.072010    True  \n",
       "2  0.138584    True           bloodhound  0.116197    True  \n",
       "3  0.360687    True   miniature_pinscher  0.222752    True  \n",
       "4  0.243682    True             Doberman  0.154629    True  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "image_predictions.head(n=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "consumer_key = 'mWMxupvHdNCdKkSRl289fZZiU'\n",
    "consumer_secret = \"fwOH5PnZ13fRA78dbvG0gKqMD2Rf2MJppzy3oAtzmnsbbMjc4s\"\n",
    "access_token = '934818650514690048-hwdq8iQ7L0axCtRov7KApwClQnGrlFu'\n",
    "access_secret = 'oMQQeifBKqlUoibZRkr7OtJQD6pi5SubNOGg4f813Ezc2'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "auth = tweepy.OAuthHandler(consumer_key, consumer_secret)\n",
    "auth.set_access_token(access_token, access_secret)\n",
    "api = tweepy.API(auth, wait_on_rate_limit = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "with open('tweet_json.txt', 'w', encoding='utf8') as f:\n",
    "    for tweet_id in df['tweet_id']:\n",
    "        try:\n",
    "            tweet = api.get_status(tweet_id, tweet_mode='extended')\n",
    "            json.dump(tweet._json, f)\n",
    "            f.write('\\n')\n",
    "        except:\n",
    "            continue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "tweets_data = []\n",
    "tweet_file = open('tweet_json.txt', 'r')\n",
    "\n",
    "for line in tweet_file:\n",
    "    try:\n",
    "        tweet = json.loads(line)\n",
    "        tweets_data.append(tweet)\n",
    "    except:\n",
    "            continue\n",
    "\n",
    "            tweet_file.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2331 entries, 0 to 2330\n",
      "Data columns (total 3 columns):\n",
      " #   Column          Non-Null Count  Dtype\n",
      "---  ------          --------------  -----\n",
      " 0   tweet_id        2331 non-null   int64\n",
      " 1   retweet_count   2331 non-null   int64\n",
      " 2   favorite_count  2331 non-null   int64\n",
      "dtypes: int64(3)\n",
      "memory usage: 54.8 KB\n"
     ]
    }
   ],
   "source": [
    "tweet_info = pd.DataFrame()\n",
    "\n",
    "tweet_info['tweet_id'] = list(map(lambda tweet: tweet['id'], tweets_data ))\n",
    "tweet_info['retweet_count'] = list(map(lambda tweet: tweet['retweet_count'], tweets_data))\n",
    "tweet_info['favorite_count'] = list(map(lambda tweet: tweet['favorite_count'], tweets_data))\n",
    "\n",
    "tweet_info.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>retweet_count</th>\n",
       "      <th>favorite_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>892420643555336193</td>\n",
       "      <td>7560</td>\n",
       "      <td>35746</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>892177421306343426</td>\n",
       "      <td>5603</td>\n",
       "      <td>30889</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>891815181378084864</td>\n",
       "      <td>3713</td>\n",
       "      <td>23229</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>891689557279858688</td>\n",
       "      <td>7747</td>\n",
       "      <td>39055</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>891327558926688256</td>\n",
       "      <td>8340</td>\n",
       "      <td>37297</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             tweet_id  retweet_count  favorite_count\n",
       "0  892420643555336193           7560           35746\n",
       "1  892177421306343426           5603           30889\n",
       "2  891815181378084864           3713           23229\n",
       "3  891689557279858688           7747           39055\n",
       "4  891327558926688256           8340           37297"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tweet_info.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2331, 3)"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tweet_info.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Assessing Data\n",
    "\n",
    "Here is surveying the data for quality and cleanliness.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>in_reply_to_status_id</th>\n",
       "      <th>in_reply_to_user_id</th>\n",
       "      <th>retweeted_status_id</th>\n",
       "      <th>retweeted_status_user_id</th>\n",
       "      <th>rating_numerator</th>\n",
       "      <th>rating_denominator</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2.356000e+03</td>\n",
       "      <td>7.800000e+01</td>\n",
       "      <td>7.800000e+01</td>\n",
       "      <td>1.810000e+02</td>\n",
       "      <td>1.810000e+02</td>\n",
       "      <td>2356.000000</td>\n",
       "      <td>2356.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>7.427716e+17</td>\n",
       "      <td>7.455079e+17</td>\n",
       "      <td>2.014171e+16</td>\n",
       "      <td>7.720400e+17</td>\n",
       "      <td>1.241698e+16</td>\n",
       "      <td>13.126486</td>\n",
       "      <td>10.455433</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>6.856705e+16</td>\n",
       "      <td>7.582492e+16</td>\n",
       "      <td>1.252797e+17</td>\n",
       "      <td>6.236928e+16</td>\n",
       "      <td>9.599254e+16</td>\n",
       "      <td>45.876648</td>\n",
       "      <td>6.745237</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>6.660209e+17</td>\n",
       "      <td>6.658147e+17</td>\n",
       "      <td>1.185634e+07</td>\n",
       "      <td>6.661041e+17</td>\n",
       "      <td>7.832140e+05</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>6.783989e+17</td>\n",
       "      <td>6.757419e+17</td>\n",
       "      <td>3.086374e+08</td>\n",
       "      <td>7.186315e+17</td>\n",
       "      <td>4.196984e+09</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>10.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>7.196279e+17</td>\n",
       "      <td>7.038708e+17</td>\n",
       "      <td>4.196984e+09</td>\n",
       "      <td>7.804657e+17</td>\n",
       "      <td>4.196984e+09</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>10.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>7.993373e+17</td>\n",
       "      <td>8.257804e+17</td>\n",
       "      <td>4.196984e+09</td>\n",
       "      <td>8.203146e+17</td>\n",
       "      <td>4.196984e+09</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>10.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>8.924206e+17</td>\n",
       "      <td>8.862664e+17</td>\n",
       "      <td>8.405479e+17</td>\n",
       "      <td>8.874740e+17</td>\n",
       "      <td>7.874618e+17</td>\n",
       "      <td>1776.000000</td>\n",
       "      <td>170.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           tweet_id  in_reply_to_status_id  in_reply_to_user_id  \\\n",
       "count  2.356000e+03           7.800000e+01         7.800000e+01   \n",
       "mean   7.427716e+17           7.455079e+17         2.014171e+16   \n",
       "std    6.856705e+16           7.582492e+16         1.252797e+17   \n",
       "min    6.660209e+17           6.658147e+17         1.185634e+07   \n",
       "25%    6.783989e+17           6.757419e+17         3.086374e+08   \n",
       "50%    7.196279e+17           7.038708e+17         4.196984e+09   \n",
       "75%    7.993373e+17           8.257804e+17         4.196984e+09   \n",
       "max    8.924206e+17           8.862664e+17         8.405479e+17   \n",
       "\n",
       "       retweeted_status_id  retweeted_status_user_id  rating_numerator  \\\n",
       "count         1.810000e+02              1.810000e+02       2356.000000   \n",
       "mean          7.720400e+17              1.241698e+16         13.126486   \n",
       "std           6.236928e+16              9.599254e+16         45.876648   \n",
       "min           6.661041e+17              7.832140e+05          0.000000   \n",
       "25%           7.186315e+17              4.196984e+09         10.000000   \n",
       "50%           7.804657e+17              4.196984e+09         11.000000   \n",
       "75%           8.203146e+17              4.196984e+09         12.000000   \n",
       "max           8.874740e+17              7.874618e+17       1776.000000   \n",
       "\n",
       "       rating_denominator  \n",
       "count         2356.000000  \n",
       "mean            10.455433  \n",
       "std              6.745237  \n",
       "min              0.000000  \n",
       "25%             10.000000  \n",
       "50%             10.000000  \n",
       "75%             10.000000  \n",
       "max            170.000000  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>in_reply_to_status_id</th>\n",
       "      <th>in_reply_to_user_id</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>source</th>\n",
       "      <th>text</th>\n",
       "      <th>retweeted_status_id</th>\n",
       "      <th>retweeted_status_user_id</th>\n",
       "      <th>retweeted_status_timestamp</th>\n",
       "      <th>expanded_urls</th>\n",
       "      <th>rating_numerator</th>\n",
       "      <th>rating_denominator</th>\n",
       "      <th>name</th>\n",
       "      <th>doggo</th>\n",
       "      <th>floofer</th>\n",
       "      <th>pupper</th>\n",
       "      <th>puppo</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1042</th>\n",
       "      <td>743895849529389061</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2016-06-17 19:59:26 +0000</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>When you're given AUX cord privileges from the...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://twitter.com/dog_rates/status/743895849...</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1948</th>\n",
       "      <td>673697980713705472</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2015-12-07 02:58:09 +0000</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Pickles. She's a tiny pointy pupper. A...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://twitter.com/dog_rates/status/673697980...</td>\n",
       "      <td>8</td>\n",
       "      <td>10</td>\n",
       "      <td>Pickles</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>pupper</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1658</th>\n",
       "      <td>683111407806746624</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2016-01-02 02:23:45 +0000</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Larry. He thought the New Year's parti...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://twitter.com/dog_rates/status/683111407...</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>Larry</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>pupper</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                tweet_id  in_reply_to_status_id  in_reply_to_user_id  \\\n",
       "1042  743895849529389061                    NaN                  NaN   \n",
       "1948  673697980713705472                    NaN                  NaN   \n",
       "1658  683111407806746624                    NaN                  NaN   \n",
       "\n",
       "                      timestamp  \\\n",
       "1042  2016-06-17 19:59:26 +0000   \n",
       "1948  2015-12-07 02:58:09 +0000   \n",
       "1658  2016-01-02 02:23:45 +0000   \n",
       "\n",
       "                                                 source  \\\n",
       "1042  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "1948  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "1658  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "\n",
       "                                                   text  retweeted_status_id  \\\n",
       "1042  When you're given AUX cord privileges from the...                  NaN   \n",
       "1948  This is Pickles. She's a tiny pointy pupper. A...                  NaN   \n",
       "1658  This is Larry. He thought the New Year's parti...                  NaN   \n",
       "\n",
       "      retweeted_status_user_id retweeted_status_timestamp  \\\n",
       "1042                       NaN                        NaN   \n",
       "1948                       NaN                        NaN   \n",
       "1658                       NaN                        NaN   \n",
       "\n",
       "                                          expanded_urls  rating_numerator  \\\n",
       "1042  https://twitter.com/dog_rates/status/743895849...                10   \n",
       "1948  https://twitter.com/dog_rates/status/673697980...                 8   \n",
       "1658  https://twitter.com/dog_rates/status/683111407...                10   \n",
       "\n",
       "      rating_denominator     name doggo floofer  pupper puppo  \n",
       "1042                  10     None  None    None    None  None  \n",
       "1948                  10  Pickles  None    None  pupper  None  \n",
       "1658                  10    Larry  None    None  pupper  None  "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.sample(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>     2221\n",
       "<a href=\"http://vine.co\" rel=\"nofollow\">Vine - Make a Scene</a>                          91\n",
       "<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>                       33\n",
       "<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>      11\n",
       "Name: source, dtype: int64"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.source.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.tweet_id.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10     2333\n",
       "11        3\n",
       "50        3\n",
       "80        2\n",
       "20        2\n",
       "2         1\n",
       "16        1\n",
       "40        1\n",
       "70        1\n",
       "15        1\n",
       "90        1\n",
       "110       1\n",
       "120       1\n",
       "130       1\n",
       "150       1\n",
       "170       1\n",
       "7         1\n",
       "0         1\n",
       "Name: rating_denominator, dtype: int64"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['rating_denominator'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "12      558\n",
       "11      464\n",
       "10      461\n",
       "13      351\n",
       "9       158\n",
       "8       102\n",
       "7        55\n",
       "14       54\n",
       "5        37\n",
       "6        32\n",
       "3        19\n",
       "4        17\n",
       "1         9\n",
       "2         9\n",
       "420       2\n",
       "0         2\n",
       "15        2\n",
       "75        2\n",
       "80        1\n",
       "20        1\n",
       "24        1\n",
       "26        1\n",
       "44        1\n",
       "50        1\n",
       "60        1\n",
       "165       1\n",
       "84        1\n",
       "88        1\n",
       "144       1\n",
       "182       1\n",
       "143       1\n",
       "666       1\n",
       "960       1\n",
       "1776      1\n",
       "17        1\n",
       "27        1\n",
       "45        1\n",
       "99        1\n",
       "121       1\n",
       "204       1\n",
       "Name: rating_numerator, dtype: int64"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['rating_numerator'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.tweet_id.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "None        745\n",
       "a            55\n",
       "Charlie      12\n",
       "Cooper       11\n",
       "Oliver       11\n",
       "           ... \n",
       "Jordy         1\n",
       "Jersey        1\n",
       "Wesley        1\n",
       "Meera         1\n",
       "Dietrich      1\n",
       "Name: name, Length: 957, dtype: int64"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#count the names\n",
    "df.name.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True     1532\n",
       "False     543\n",
       "Name: p1_dog, dtype: int64"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "image_predictions.p1_dog.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['tweet_id', 'jpg_url', 'img_num', 'p1', 'p1_conf', 'p1_dog', 'p2',\n",
       "       'p2_conf', 'p2_dog', 'p3', 'p3_conf', 'p3_dog'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "image_predictions.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True     1553\n",
       "False     522\n",
       "Name: p2_dog, dtype: int64"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "image_predictions.p2_dog.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True     1499\n",
       "False     576\n",
       "Name: p3_dog, dtype: int64"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "image_predictions.p3_dog.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tweet_id    324\n",
       "jpg_url     324\n",
       "img_num     324\n",
       "p1          324\n",
       "p1_conf     324\n",
       "p1_dog      324\n",
       "p2          324\n",
       "p2_conf     324\n",
       "p2_dog      324\n",
       "p3          324\n",
       "p3_conf     324\n",
       "p3_dog      324\n",
       "dtype: int64"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fimage =image_predictions[(image_predictions['p1_dog']==False) & (image_predictions['p2_dog']==False) & (image_predictions['p3_dog']==False)]\n",
    "fimage.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>jpg_url</th>\n",
       "      <th>img_num</th>\n",
       "      <th>p1</th>\n",
       "      <th>p1_conf</th>\n",
       "      <th>p1_dog</th>\n",
       "      <th>p2</th>\n",
       "      <th>p2_conf</th>\n",
       "      <th>p2_dog</th>\n",
       "      <th>p3</th>\n",
       "      <th>p3_conf</th>\n",
       "      <th>p3_dog</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1227</th>\n",
       "      <td>745314880350101504</td>\n",
       "      <td>https://pbs.twimg.com/media/Clfj6RYWMAAFAOW.jpg</td>\n",
       "      <td>2</td>\n",
       "      <td>ice_bear</td>\n",
       "      <td>0.807762</td>\n",
       "      <td>False</td>\n",
       "      <td>great_white_shark</td>\n",
       "      <td>0.027040</td>\n",
       "      <td>False</td>\n",
       "      <td>fountain</td>\n",
       "      <td>0.022052</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>293</th>\n",
       "      <td>671347597085433856</td>\n",
       "      <td>https://pbs.twimg.com/media/CVEbFDRWsAAkN_7.jpg</td>\n",
       "      <td>1</td>\n",
       "      <td>picket_fence</td>\n",
       "      <td>0.382918</td>\n",
       "      <td>False</td>\n",
       "      <td>rain_barrel</td>\n",
       "      <td>0.108809</td>\n",
       "      <td>False</td>\n",
       "      <td>plastic_bag</td>\n",
       "      <td>0.038878</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1448</th>\n",
       "      <td>776113305656188928</td>\n",
       "      <td>https://pbs.twimg.com/media/CsVO7ljW8AAckRD.jpg</td>\n",
       "      <td>1</td>\n",
       "      <td>mousetrap</td>\n",
       "      <td>0.777468</td>\n",
       "      <td>False</td>\n",
       "      <td>black_widow</td>\n",
       "      <td>0.093940</td>\n",
       "      <td>False</td>\n",
       "      <td>paddlewheel</td>\n",
       "      <td>0.017492</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                tweet_id                                          jpg_url  \\\n",
       "1227  745314880350101504  https://pbs.twimg.com/media/Clfj6RYWMAAFAOW.jpg   \n",
       "293   671347597085433856  https://pbs.twimg.com/media/CVEbFDRWsAAkN_7.jpg   \n",
       "1448  776113305656188928  https://pbs.twimg.com/media/CsVO7ljW8AAckRD.jpg   \n",
       "\n",
       "      img_num            p1   p1_conf  p1_dog                 p2   p2_conf  \\\n",
       "1227        2      ice_bear  0.807762   False  great_white_shark  0.027040   \n",
       "293         1  picket_fence  0.382918   False        rain_barrel  0.108809   \n",
       "1448        1     mousetrap  0.777468   False        black_widow  0.093940   \n",
       "\n",
       "      p2_dog           p3   p3_conf  p3_dog  \n",
       "1227   False     fountain  0.022052   False  \n",
       "293    False  plastic_bag  0.038878   False  \n",
       "1448   False  paddlewheel  0.017492   False  "
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fimage.sample(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "checking for all value is unique "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2331\n"
     ]
    }
   ],
   "source": [
    "print(sum(tweet_info.groupby('tweet_id')['tweet_id'].nunique()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n"
     ]
    }
   ],
   "source": [
    "print(sum(tweet_info.tweet_id.duplicated()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Quality:\n",
    "- remove unnecessary columns \n",
    "\n",
    "- conversion the data type from timestamp to datetime \n",
    "\n",
    "- update source column from url to text \n",
    "\n",
    "- make all values in ratings_denominator '10' for consistency \n",
    "\n",
    "- remove  (not_dogs) where p1, p2, and p3 are false \n",
    "\n",
    "- Keep real dog and maybe Dog from Dogs Predictions column\n",
    "\n",
    "- Check rating_numerator exceptions \n",
    "\n",
    "- Change the data type of tweet_id from integer to string\n",
    "\n",
    "- Clean 'name' column.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Tidiness:\n",
    "\n",
    "\n",
    "- Gather phases of dogs (doggo, puppo, pupper, floofer) into one column 'dog_stage' \n",
    "\n",
    "- Parse timestamp into discrete column ( year, month, day, time )\n",
    "\n",
    "- Make 'Dogs_Predictions' column  (Dog, Maybe Dog, Not Dog)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "# Cleaning Data\n",
    "\n",
    "\n",
    "- Define \n",
    "\n",
    "- Code \n",
    "\n",
    "- Test\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_clean=df.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "t_clean= tweet_info.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "i_clean= image_predictions.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>in_reply_to_status_id</th>\n",
       "      <th>in_reply_to_user_id</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>source</th>\n",
       "      <th>text</th>\n",
       "      <th>retweeted_status_id</th>\n",
       "      <th>retweeted_status_user_id</th>\n",
       "      <th>retweeted_status_timestamp</th>\n",
       "      <th>expanded_urls</th>\n",
       "      <th>rating_numerator</th>\n",
       "      <th>rating_denominator</th>\n",
       "      <th>name</th>\n",
       "      <th>doggo</th>\n",
       "      <th>floofer</th>\n",
       "      <th>pupper</th>\n",
       "      <th>puppo</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>892420643555336193</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2017-08-01 16:23:56 +0000</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Phineas. He's a mystical boy. Only eve...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://twitter.com/dog_rates/status/892420643...</td>\n",
       "      <td>13</td>\n",
       "      <td>10</td>\n",
       "      <td>Phineas</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>892177421306343426</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2017-08-01 00:17:27 +0000</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Tilly. She's just checking pup on you....</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://twitter.com/dog_rates/status/892177421...</td>\n",
       "      <td>13</td>\n",
       "      <td>10</td>\n",
       "      <td>Tilly</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>891815181378084864</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2017-07-31 00:18:03 +0000</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Archie. He is a rare Norwegian Pouncin...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://twitter.com/dog_rates/status/891815181...</td>\n",
       "      <td>12</td>\n",
       "      <td>10</td>\n",
       "      <td>Archie</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>891689557279858688</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2017-07-30 15:58:51 +0000</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Darla. She commenced a snooze mid meal...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://twitter.com/dog_rates/status/891689557...</td>\n",
       "      <td>13</td>\n",
       "      <td>10</td>\n",
       "      <td>Darla</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>891327558926688256</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2017-07-29 16:00:24 +0000</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Franklin. He would like you to stop ca...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://twitter.com/dog_rates/status/891327558...</td>\n",
       "      <td>12</td>\n",
       "      <td>10</td>\n",
       "      <td>Franklin</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             tweet_id  in_reply_to_status_id  in_reply_to_user_id  \\\n",
       "0  892420643555336193                    NaN                  NaN   \n",
       "1  892177421306343426                    NaN                  NaN   \n",
       "2  891815181378084864                    NaN                  NaN   \n",
       "3  891689557279858688                    NaN                  NaN   \n",
       "4  891327558926688256                    NaN                  NaN   \n",
       "\n",
       "                   timestamp  \\\n",
       "0  2017-08-01 16:23:56 +0000   \n",
       "1  2017-08-01 00:17:27 +0000   \n",
       "2  2017-07-31 00:18:03 +0000   \n",
       "3  2017-07-30 15:58:51 +0000   \n",
       "4  2017-07-29 16:00:24 +0000   \n",
       "\n",
       "                                              source  \\\n",
       "0  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "1  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "2  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "3  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "4  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "\n",
       "                                                text  retweeted_status_id  \\\n",
       "0  This is Phineas. He's a mystical boy. Only eve...                  NaN   \n",
       "1  This is Tilly. She's just checking pup on you....                  NaN   \n",
       "2  This is Archie. He is a rare Norwegian Pouncin...                  NaN   \n",
       "3  This is Darla. She commenced a snooze mid meal...                  NaN   \n",
       "4  This is Franklin. He would like you to stop ca...                  NaN   \n",
       "\n",
       "   retweeted_status_user_id retweeted_status_timestamp  \\\n",
       "0                       NaN                        NaN   \n",
       "1                       NaN                        NaN   \n",
       "2                       NaN                        NaN   \n",
       "3                       NaN                        NaN   \n",
       "4                       NaN                        NaN   \n",
       "\n",
       "                                       expanded_urls  rating_numerator  \\\n",
       "0  https://twitter.com/dog_rates/status/892420643...                13   \n",
       "1  https://twitter.com/dog_rates/status/892177421...                13   \n",
       "2  https://twitter.com/dog_rates/status/891815181...                12   \n",
       "3  https://twitter.com/dog_rates/status/891689557...                13   \n",
       "4  https://twitter.com/dog_rates/status/891327558...                12   \n",
       "\n",
       "   rating_denominator      name doggo floofer pupper puppo  \n",
       "0                  10   Phineas  None    None   None  None  \n",
       "1                  10     Tilly  None    None   None  None  \n",
       "2                  10    Archie  None    None   None  None  \n",
       "3                  10     Darla  None    None   None  None  \n",
       "4                  10  Franklin  None    None   None  None  "
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_clean.head(n=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2356 entries, 0 to 2355\n",
      "Data columns (total 17 columns):\n",
      " #   Column                      Non-Null Count  Dtype  \n",
      "---  ------                      --------------  -----  \n",
      " 0   tweet_id                    2356 non-null   int64  \n",
      " 1   in_reply_to_status_id       78 non-null     float64\n",
      " 2   in_reply_to_user_id         78 non-null     float64\n",
      " 3   timestamp                   2356 non-null   object \n",
      " 4   source                      2356 non-null   object \n",
      " 5   text                        2356 non-null   object \n",
      " 6   retweeted_status_id         181 non-null    float64\n",
      " 7   retweeted_status_user_id    181 non-null    float64\n",
      " 8   retweeted_status_timestamp  181 non-null    object \n",
      " 9   expanded_urls               2297 non-null   object \n",
      " 10  rating_numerator            2356 non-null   int64  \n",
      " 11  rating_denominator          2356 non-null   int64  \n",
      " 12  name                        2356 non-null   object \n",
      " 13  doggo                       2356 non-null   object \n",
      " 14  floofer                     2356 non-null   object \n",
      " 15  pupper                      2356 non-null   object \n",
      " 16  puppo                       2356 non-null   object \n",
      "dtypes: float64(4), int64(3), object(10)\n",
      "memory usage: 313.0+ KB\n"
     ]
    }
   ],
   "source": [
    "df_clean.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1-Define\n",
    "\n",
    "\n",
    "#### remove missing value in df_clean and remove columns not important.\n",
    "\n",
    "\n",
    "## 1-Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "# remove missing value\n",
    "df_clean.drop(df_clean[df_clean.retweeted_status_id.notnull()].index, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "# remove not important columns\n",
    "df_clean.drop(['in_reply_to_status_id','in_reply_to_user_id','retweeted_status_id','retweeted_status_user_id','retweeted_status_timestamp'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "12"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_clean.shape[1]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1-Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 2175 entries, 0 to 2355\n",
      "Data columns (total 12 columns):\n",
      " #   Column              Non-Null Count  Dtype \n",
      "---  ------              --------------  ----- \n",
      " 0   tweet_id            2175 non-null   int64 \n",
      " 1   timestamp           2175 non-null   object\n",
      " 2   source              2175 non-null   object\n",
      " 3   text                2175 non-null   object\n",
      " 4   expanded_urls       2117 non-null   object\n",
      " 5   rating_numerator    2175 non-null   int64 \n",
      " 6   rating_denominator  2175 non-null   int64 \n",
      " 7   name                2175 non-null   object\n",
      " 8   doggo               2175 non-null   object\n",
      " 9   floofer             2175 non-null   object\n",
      " 10  pupper              2175 non-null   object\n",
      " 11  puppo               2175 non-null   object\n",
      "dtypes: int64(3), object(9)\n",
      "memory usage: 220.9+ KB\n"
     ]
    }
   ],
   "source": [
    "df_clean.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 2175 entries, 0 to 2355\n",
      "Data columns (total 12 columns):\n",
      " #   Column              Non-Null Count  Dtype \n",
      "---  ------              --------------  ----- \n",
      " 0   tweet_id            2175 non-null   int64 \n",
      " 1   timestamp           2175 non-null   object\n",
      " 2   source              2175 non-null   object\n",
      " 3   text                2175 non-null   object\n",
      " 4   expanded_urls       2117 non-null   object\n",
      " 5   rating_numerator    2175 non-null   int64 \n",
      " 6   rating_denominator  2175 non-null   int64 \n",
      " 7   name                2175 non-null   object\n",
      " 8   doggo               2175 non-null   object\n",
      " 9   floofer             2175 non-null   object\n",
      " 10  pupper              2175 non-null   object\n",
      " 11  puppo               2175 non-null   object\n",
      "dtypes: int64(3), object(9)\n",
      "memory usage: 220.9+ KB\n"
     ]
    }
   ],
   "source": [
    "df_clean.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "12"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_clean.shape[1]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3-Define:\n",
    "    \n",
    "    \n",
    "#### Merge dogs stage columns (doggo, floofer, pupper, puppo) into one 'the_dogs_stage' column.\n",
    "\n",
    "\n",
    "### 3-Code"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### replace empty value with a space\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_clean.doggo.replace( 'None', '', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_clean.floofer.replace( 'None', '', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_clean.pupper.replace( 'None', '', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_clean.puppo.replace( 'None', '', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "# create new column \"the_dogs_stage\" and merge 4 column \n",
    "df_clean['the_dogs_stage'] = df_clean.doggo + df_clean.floofer + df_clean.pupper + df_clean.puppo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['tweet_id', 'timestamp', 'source', 'text', 'expanded_urls',\n",
       "       'rating_numerator', 'rating_denominator', 'name', 'doggo', 'floofer',\n",
       "       'pupper', 'puppo', 'the_dogs_stage'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_clean.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>doggo</th>\n",
       "      <th>floofer</th>\n",
       "      <th>pupper</th>\n",
       "      <th>puppo</th>\n",
       "      <th>the_dogs_stage</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>317</th>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2196</th>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1315</th>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     doggo floofer pupper puppo the_dogs_stage\n",
       "317                                           \n",
       "2196                                          \n",
       "1315                                          "
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_clean[['doggo', 'floofer', 'pupper', 'puppo', 'the_dogs_stage']].sample(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "# replace space with NaNs\n",
    "df_clean.loc[df_clean.the_dogs_stage== '', 'the_dogs_stage'] = np.nan"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Unknown         1831\n",
       "pupper           224\n",
       "doggo             75\n",
       "puppo             24\n",
       "doggopupper       10\n",
       "floofer            9\n",
       "doggofloofer       1\n",
       "doggopuppo         1\n",
       "Name: the_dogs_stage, dtype: int64"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_clean.the_dogs_stage = df_clean.the_dogs_stage.fillna('Unknown')\n",
    "df_clean.the_dogs_stage.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "# remove unnecessary columns\n",
    "df_clean.drop(['pupper','doggo','puppo', 'floofer'],axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3-Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['tweet_id', 'timestamp', 'source', 'text', 'expanded_urls',\n",
       "       'rating_numerator', 'rating_denominator', 'name', 'the_dogs_stage'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_clean.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4-Define:\n",
    "    \n",
    "    \n",
    "#### conversion source links with text string defining the link.\n",
    "\n",
    "\n",
    "### 4-Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "source_txt = {'<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>': 'Twitter for iPhone',\n",
    "              '<a href=\"http://vine.co\" rel=\"nofollow\">Vine - Make a Scene</a>': 'Vine - Make a Scene',\n",
    "              '<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>': 'Twitter Web Client',\n",
    "              '<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>': 'TweetDeck'}\n",
    "\n",
    "def text_source(df_clean):\n",
    "    if df_clean['source'] in source_txt.keys():\n",
    "        abbrev = source_txt[df_clean['source']]\n",
    "        return abbrev \n",
    "    else:\n",
    "        return df_clean['source']\n",
    "\n",
    "df_clean['source'] =df_clean.apply(text_source, axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4-Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Twitter for iPhone     2042\n",
       "Vine - Make a Scene      91\n",
       "Twitter Web Client       31\n",
       "TweetDeck                11\n",
       "Name: source, dtype: int64"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_clean.source.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 5-Define:\n",
    "\n",
    "\n",
    "#### Merge t_clean and df_clean, through inner join (default) on 'tweet_id'.\n",
    "\n",
    "\n",
    "### 5-Code\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_master = pd.merge(df_clean, t_clean, on='tweet_id', how = 'inner')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 5-Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 2168 entries, 0 to 2167\n",
      "Data columns (total 11 columns):\n",
      " #   Column              Non-Null Count  Dtype \n",
      "---  ------              --------------  ----- \n",
      " 0   tweet_id            2168 non-null   int64 \n",
      " 1   timestamp           2168 non-null   object\n",
      " 2   source              2168 non-null   object\n",
      " 3   text                2168 non-null   object\n",
      " 4   expanded_urls       2110 non-null   object\n",
      " 5   rating_numerator    2168 non-null   int64 \n",
      " 6   rating_denominator  2168 non-null   int64 \n",
      " 7   name                2168 non-null   object\n",
      " 8   the_dogs_stage      2168 non-null   object\n",
      " 9   retweet_count       2168 non-null   int64 \n",
      " 10  favorite_count      2168 non-null   int64 \n",
      "dtypes: int64(5), object(6)\n",
      "memory usage: 203.2+ KB\n"
     ]
    }
   ],
   "source": [
    "df_master.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tweet_id               int64\n",
       "timestamp             object\n",
       "source                object\n",
       "text                  object\n",
       "expanded_urls         object\n",
       "rating_numerator       int64\n",
       "rating_denominator     int64\n",
       "name                  object\n",
       "the_dogs_stage        object\n",
       "retweet_count          int64\n",
       "favorite_count         int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_master.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2168, 11)"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_master.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 6-Define:\n",
    "    \n",
    "    \n",
    "#### conversion timestamp to datetime & spread in 4 columns for (year, month, day, and time)\n",
    "\n",
    "\n",
    "### 6-Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "# change the data type from timestamp to datetime\n",
    "df_master['timestamp'] = pd.to_datetime(df_master['timestamp'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tweet_id                            int64\n",
       "timestamp             datetime64[ns, UTC]\n",
       "source                             object\n",
       "text                               object\n",
       "expanded_urls                      object\n",
       "rating_numerator                    int64\n",
       "rating_denominator                  int64\n",
       "name                               object\n",
       "the_dogs_stage                     object\n",
       "retweet_count                       int64\n",
       "favorite_count                      int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_master.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### create new columns (year) - (month) - (day) - (time)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_master['year'] = df_master['timestamp'].dt.year"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_master['month'] = df_master['timestamp'].dt.month"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_master['day'] = df_master['timestamp'].dt.day"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_master['time'] = df_master['timestamp'].dt.time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['tweet_id', 'timestamp', 'source', 'text', 'expanded_urls',\n",
       "       'rating_numerator', 'rating_denominator', 'name', 'the_dogs_stage',\n",
       "       'retweet_count', 'favorite_count', 'year', 'month', 'day', 'time'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_master.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2016    1086\n",
       "2015     687\n",
       "2017     395\n",
       "Name: year, dtype: int64"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_master['year'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "12    446\n",
       "11    358\n",
       "1     265\n",
       "2     196\n",
       "3     191\n",
       "7     149\n",
       "6     143\n",
       "4     109\n",
       "5     105\n",
       "10     73\n",
       "9      68\n",
       "8      65\n",
       "Name: month, dtype: int64"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_master['month'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Create  new column (WeekDay)\n",
    "df_master['WeekDay'] = df_master['timestamp'].dt.dayofweek\n",
    "days = {0:'Mon',1:'Tues',2:'Weds',3:'Thurs',4:'Fri',5:'Sat',6:'Sun'}\n",
    "df_master['WeekDay'] = df_master['WeekDay'].apply(lambda x: days[x])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 6-Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 2168 entries, 0 to 2167\n",
      "Data columns (total 16 columns):\n",
      " #   Column              Non-Null Count  Dtype              \n",
      "---  ------              --------------  -----              \n",
      " 0   tweet_id            2168 non-null   int64              \n",
      " 1   timestamp           2168 non-null   datetime64[ns, UTC]\n",
      " 2   source              2168 non-null   object             \n",
      " 3   text                2168 non-null   object             \n",
      " 4   expanded_urls       2110 non-null   object             \n",
      " 5   rating_numerator    2168 non-null   int64              \n",
      " 6   rating_denominator  2168 non-null   int64              \n",
      " 7   name                2168 non-null   object             \n",
      " 8   the_dogs_stage      2168 non-null   object             \n",
      " 9   retweet_count       2168 non-null   int64              \n",
      " 10  favorite_count      2168 non-null   int64              \n",
      " 11  year                2168 non-null   int64              \n",
      " 12  month               2168 non-null   int64              \n",
      " 13  day                 2168 non-null   int64              \n",
      " 14  time                2168 non-null   object             \n",
      " 15  WeekDay             2168 non-null   object             \n",
      "dtypes: datetime64[ns, UTC](1), int64(8), object(7)\n",
      "memory usage: 287.9+ KB\n"
     ]
    }
   ],
   "source": [
    "df_master.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Mon      357\n",
       "Tues     326\n",
       "Weds     320\n",
       "Fri      303\n",
       "Thurs    302\n",
       "Sat      284\n",
       "Sun      276\n",
       "Name: WeekDay, dtype: int64"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_master['WeekDay'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 7-Define:\n",
    "    \n",
    "    \n",
    "#### gathering dog stages from different columns into one, making a \"Dogs_Predictions\" column (dog, not dog, maybe dog), and consolidating the three datasets into one.\n",
    "\n",
    "\n",
    "### 7-Code\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": [
    "#change datatype for (p1_dog, p2_dog, p3_dog) to integer\n",
    "predictions_dog =['p1_dog', 'p2_dog', 'p3_dog']\n",
    "for p in predictions_dog:\n",
    "    i_clean[p] =i_clean[p].astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create new column 'Dogs_Predictions' and insert into the column number of True and False\n",
    "i_clean['Dogs_Predictions'] = i_clean.p1_dog + i_clean.p2_dog + i_clean.p3_dog"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [],
   "source": [
    "# change the number with a text and the text based on (0, 'Not Dog'), (1 or 2 'Maybe Dog'), (3, 'Dog')\n",
    "i_clean['Dogs_Predictions'] = i_clean['Dogs_Predictions'].replace(0, 'not dog')\n",
    "i_clean['Dogs_Predictions'] = i_clean['Dogs_Predictions'].replace(1, 'maybe dog')\n",
    "i_clean['Dogs_Predictions'] = i_clean['Dogs_Predictions'].replace(2, 'maybe dog')\n",
    "i_clean['Dogs_Predictions'] = i_clean['Dogs_Predictions'].replace(3, 'real dog')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 7-Test "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "real dog     1243\n",
       "maybe dog     508\n",
       "not dog       324\n",
       "Name: Dogs_Predictions, dtype: int64"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#checking based on Dogs Predictions how many real dog, maybe dog, not dog\n",
    "i_clean.Dogs_Predictions.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 8-Define:\n",
    "\n",
    "\n",
    "#### remove the ( p1 _dog, p2_dog, and p3_dog) columns it is unnecessary\n",
    "\n",
    "\n",
    "### 8-Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [],
   "source": [
    "# now i don't needed for ('p1_dog', 'p2_dog', 'p3_dog', 'img_num') so i drop it\n",
    "i_clean.drop(['p1_dog', 'p2_dog', 'p3_dog', 'img_num'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 8-Test "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['tweet_id', 'jpg_url', 'p1', 'p1_conf', 'p2', 'p2_conf', 'p3',\n",
       "       'p3_conf', 'Dogs_Predictions'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "i_clean.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 9-Define:\n",
    "\n",
    "\n",
    "#### Join i_clean to df_master on 'tweet_id'\n",
    "\n",
    "\n",
    "### 9-Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Join between df_master and i_clean\n",
    "df_master = pd.merge(df_master, i_clean, on='tweet_id')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 9-Test "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['tweet_id', 'timestamp', 'source', 'text', 'expanded_urls',\n",
       "       'rating_numerator', 'rating_denominator', 'name', 'the_dogs_stage',\n",
       "       'retweet_count', 'favorite_count', 'year', 'month', 'day', 'time',\n",
       "       'WeekDay', 'jpg_url', 'p1', 'p1_conf', 'p2', 'p2_conf', 'p3', 'p3_conf',\n",
       "       'Dogs_Predictions'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# show df_master after join \n",
    "df_master.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 10-Define:\n",
    "\n",
    "\n",
    "#### make all values in ratings_denominator '10' for consistency\n",
    "\n",
    "\n",
    "### 10-Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [],
   "source": [
    "# drop 'rating_denominator' \n",
    "df_master.drop(['rating_denominator'], axis=1, inplace=True )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [],
   "source": [
    "# rename 'rating_numerator' to 'The_Rating'\n",
    "df_master.rename(columns={'rating_numerator': 'The_Rating'}, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 10-Test "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['tweet_id', 'timestamp', 'source', 'text', 'expanded_urls',\n",
       "       'The_Rating', 'name', 'the_dogs_stage', 'retweet_count',\n",
       "       'favorite_count', 'year', 'month', 'day', 'time', 'WeekDay', 'jpg_url',\n",
       "       'p1', 'p1_conf', 'p2', 'p2_conf', 'p3', 'p3_conf', 'Dogs_Predictions'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_master.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 11-Define:\n",
    "\n",
    "\n",
    "#### Clean 'name' column.\n",
    "\n",
    "\n",
    "### 11-Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "None       546\n",
       "a           55\n",
       "Oliver      10\n",
       "Charlie     10\n",
       "Cooper      10\n",
       "          ... \n",
       "Kloey        1\n",
       "Tommy        1\n",
       "Keet         1\n",
       "Goose        1\n",
       "Kulet        1\n",
       "Name: name, Length: 934, dtype: int64"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_master['name'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [],
   "source": [
    "w_name = df_master.name.str.islower()\n",
    "df_master.loc[w_name, 'name'] = 'None'\n",
    "df_master.name = df_master.name.str.title()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 11-Test "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "None        644\n",
       "Charlie      10\n",
       "Oliver       10\n",
       "Cooper       10\n",
       "Tucker        9\n",
       "           ... \n",
       "Shaggy        1\n",
       "Lucky         1\n",
       "Bluebert      1\n",
       "Jonah         1\n",
       "Durg          1\n",
       "Name: name, Length: 912, dtype: int64"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_master['name'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 12-Define:\n",
    "    \n",
    "    \n",
    "#### For the predictions (p1, p2, p3), delete underscores.\n",
    "\n",
    "\n",
    "### 12-Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [],
   "source": [
    "# replace from '_'  to \" \"\n",
    "n_predictions = ['p1', 'p2', 'p3']\n",
    "for p in n_predictions:\n",
    "    df_master[p] =df_master[p].str.title().str.replace('_', \" \")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 12-Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>p1_conf</th>\n",
       "      <th>p2_conf</th>\n",
       "      <th>p3_conf</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1489</th>\n",
       "      <td>0.460710</td>\n",
       "      <td>0.202765</td>\n",
       "      <td>0.133266</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1044</th>\n",
       "      <td>0.979206</td>\n",
       "      <td>0.007185</td>\n",
       "      <td>0.006438</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1806</th>\n",
       "      <td>0.756829</td>\n",
       "      <td>0.233520</td>\n",
       "      <td>0.003812</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       p1_conf   p2_conf   p3_conf\n",
       "1489  0.460710  0.202765  0.133266\n",
       "1044  0.979206  0.007185  0.006438\n",
       "1806  0.756829  0.233520  0.003812"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_master[['p1_conf', 'p2_conf', 'p3_conf']].sample(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>p1</th>\n",
       "      <th>p2</th>\n",
       "      <th>p3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1258</th>\n",
       "      <td>Norwich Terrier</td>\n",
       "      <td>Cocker Spaniel</td>\n",
       "      <td>Golden Retriever</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>805</th>\n",
       "      <td>Bath Towel</td>\n",
       "      <td>Swab</td>\n",
       "      <td>American Staffordshire Terrier</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>521</th>\n",
       "      <td>Golden Retriever</td>\n",
       "      <td>Otterhound</td>\n",
       "      <td>Clumber</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    p1              p2                              p3\n",
       "1258   Norwich Terrier  Cocker Spaniel                Golden Retriever\n",
       "805         Bath Towel            Swab  American Staffordshire Terrier\n",
       "521   Golden Retriever      Otterhound                         Clumber"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_master[['p1', 'p2', 'p3']].sample(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 13-Define:\n",
    "\n",
    "    \n",
    "#### conversion confidence levels to a percentage by multiplying by 100 \n",
    "\n",
    "\n",
    "### 13-Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [],
   "source": [
    "con = ['p1_conf', 'p2_conf', 'p3_conf']\n",
    "for c in con:\n",
    "    df_master[c] =round(df_master[c]*100).astype(int)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 13-Test "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>p1_conf</th>\n",
       "      <th>p2_conf</th>\n",
       "      <th>p3_conf</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1205</th>\n",
       "      <td>29</td>\n",
       "      <td>10</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>78</th>\n",
       "      <td>81</td>\n",
       "      <td>12</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1144</th>\n",
       "      <td>23</td>\n",
       "      <td>22</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>952</th>\n",
       "      <td>21</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>578</th>\n",
       "      <td>37</td>\n",
       "      <td>22</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      p1_conf  p2_conf  p3_conf\n",
       "1205       29       10        4\n",
       "78         81       12        5\n",
       "1144       23       22        9\n",
       "952        21        8        8\n",
       "578        37       22       16"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_master[['p1_conf', 'p2_conf', 'p3_conf']].sample(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 14-Define:\n",
    "\n",
    "    \n",
    "#### Keep on the real dog and maybe Dog from Dogs Predictions column\n",
    "\n",
    "\n",
    "### 14-Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [],
   "source": [
    "# get on the real dog and maybe Dog from Dogs Predictions column\n",
    "df_master = df_master[df_master['Dogs_Predictions'] != \"not dog\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 14-Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "real dog     1196\n",
       "maybe dog     483\n",
       "Name: Dogs_Predictions, dtype: int64"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_master.Dogs_Predictions.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 15-Define:\n",
    "\n",
    "\n",
    "#### conversion the data type of tweet_id from integer to string\n",
    "\n",
    "\n",
    "### 15-Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_master['tweet_id'] = df_master['tweet_id'].astype(str)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 15-Test "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count                   1679\n",
       "unique                  1679\n",
       "top       666073100786774016\n",
       "freq                       1\n",
       "Name: tweet_id, dtype: object"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_master['tweet_id'].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 16-Define:\n",
    "    \n",
    "\n",
    "\n",
    "#### Create a copy of the master dataset for known dogs only.\n",
    "\n",
    "\n",
    "### 16-Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_the_dogs =df_master[df_master['Dogs_Predictions'] == \"real dog\"].copy()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 16-Test "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "real dog    1196\n",
       "Name: Dogs_Predictions, dtype: int64"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_the_dogs.Dogs_Predictions.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 1196 entries, 1 to 1986\n",
      "Data columns (total 23 columns):\n",
      " #   Column            Non-Null Count  Dtype              \n",
      "---  ------            --------------  -----              \n",
      " 0   tweet_id          1196 non-null   object             \n",
      " 1   timestamp         1196 non-null   datetime64[ns, UTC]\n",
      " 2   source            1196 non-null   object             \n",
      " 3   text              1196 non-null   object             \n",
      " 4   expanded_urls     1196 non-null   object             \n",
      " 5   The_Rating        1196 non-null   int64              \n",
      " 6   name              1196 non-null   object             \n",
      " 7   the_dogs_stage    1196 non-null   object             \n",
      " 8   retweet_count     1196 non-null   int64              \n",
      " 9   favorite_count    1196 non-null   int64              \n",
      " 10  year              1196 non-null   int64              \n",
      " 11  month             1196 non-null   int64              \n",
      " 12  day               1196 non-null   int64              \n",
      " 13  time              1196 non-null   object             \n",
      " 14  WeekDay           1196 non-null   object             \n",
      " 15  jpg_url           1196 non-null   object             \n",
      " 16  p1                1196 non-null   object             \n",
      " 17  p1_conf           1196 non-null   int64              \n",
      " 18  p2                1196 non-null   object             \n",
      " 19  p2_conf           1196 non-null   int64              \n",
      " 20  p3                1196 non-null   object             \n",
      " 21  p3_conf           1196 non-null   int64              \n",
      " 22  Dogs_Predictions  1196 non-null   object             \n",
      "dtypes: datetime64[ns, UTC](1), int64(9), object(13)\n",
      "memory usage: 224.2+ KB\n"
     ]
    }
   ],
   "source": [
    "df_the_dogs.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 17-Define:\n",
    "\n",
    "\n",
    "#### remove columns unnecessary\n",
    "\n",
    "\n",
    "### 17-Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_the_dogs.drop(['year', 'month', 'day', 'time', 'Dogs_Predictions','source','p1_conf', 'p2', 'p2_conf', 'p3', 'p3_conf', 'expanded_urls'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 17-Test "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 1196 entries, 1 to 1986\n",
      "Data columns (total 11 columns):\n",
      " #   Column          Non-Null Count  Dtype              \n",
      "---  ------          --------------  -----              \n",
      " 0   tweet_id        1196 non-null   object             \n",
      " 1   timestamp       1196 non-null   datetime64[ns, UTC]\n",
      " 2   text            1196 non-null   object             \n",
      " 3   The_Rating      1196 non-null   int64              \n",
      " 4   name            1196 non-null   object             \n",
      " 5   the_dogs_stage  1196 non-null   object             \n",
      " 6   retweet_count   1196 non-null   int64              \n",
      " 7   favorite_count  1196 non-null   int64              \n",
      " 8   WeekDay         1196 non-null   object             \n",
      " 9   jpg_url         1196 non-null   object             \n",
      " 10  p1              1196 non-null   object             \n",
      "dtypes: datetime64[ns, UTC](1), int64(3), object(7)\n",
      "memory usage: 112.1+ KB\n"
     ]
    }
   ],
   "source": [
    "df_the_dogs.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>p1</th>\n",
       "      <th>rating</th>\n",
       "      <th>favorite_count</th>\n",
       "      <th>retweet_count</th>\n",
       "      <th>dog_stage</th>\n",
       "      <th>name</th>\n",
       "      <th>text</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>jpg_url</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1189</th>\n",
       "      <td>691416866452082688</td>\n",
       "      <td>Lakeland Terrier</td>\n",
       "      <td>NaN</td>\n",
       "      <td>18997</td>\n",
       "      <td>7481</td>\n",
       "      <td>NaN</td>\n",
       "      <td>None</td>\n",
       "      <td>I present to you... Dog Jesus. 13/10 (he could...</td>\n",
       "      <td>2016-01-25 00:26:41+00:00</td>\n",
       "      <td>https://pbs.twimg.com/media/CZhn-QAWwAASQan.jpg</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1109</th>\n",
       "      <td>698635131305795584</td>\n",
       "      <td>Samoyed</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1274</td>\n",
       "      <td>336</td>\n",
       "      <td>NaN</td>\n",
       "      <td>None</td>\n",
       "      <td>Here we are witnessing five Guatemalan Birch F...</td>\n",
       "      <td>2016-02-13 22:29:29+00:00</td>\n",
       "      <td>https://pbs.twimg.com/ext_tw_video_thumb/69863...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307</th>\n",
       "      <td>822610361945911296</td>\n",
       "      <td>Cocker Spaniel</td>\n",
       "      <td>NaN</td>\n",
       "      <td>14805</td>\n",
       "      <td>2943</td>\n",
       "      <td>NaN</td>\n",
       "      <td>None</td>\n",
       "      <td>Please stop sending in non-canines like this V...</td>\n",
       "      <td>2017-01-21 01:02:48+00:00</td>\n",
       "      <td>https://pbs.twimg.com/media/C2p_wQyXEAELtvS.jpg</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                tweet_id                p1  rating  favorite_count  \\\n",
       "1189  691416866452082688  Lakeland Terrier     NaN           18997   \n",
       "1109  698635131305795584           Samoyed     NaN            1274   \n",
       "307   822610361945911296    Cocker Spaniel     NaN           14805   \n",
       "\n",
       "      retweet_count  dog_stage  name  \\\n",
       "1189           7481        NaN  None   \n",
       "1109            336        NaN  None   \n",
       "307            2943        NaN  None   \n",
       "\n",
       "                                                   text  \\\n",
       "1189  I present to you... Dog Jesus. 13/10 (he could...   \n",
       "1109  Here we are witnessing five Guatemalan Birch F...   \n",
       "307   Please stop sending in non-canines like this V...   \n",
       "\n",
       "                     timestamp  \\\n",
       "1189 2016-01-25 00:26:41+00:00   \n",
       "1109 2016-02-13 22:29:29+00:00   \n",
       "307  2017-01-21 01:02:48+00:00   \n",
       "\n",
       "                                                jpg_url  \n",
       "1189    https://pbs.twimg.com/media/CZhn-QAWwAASQan.jpg  \n",
       "1109  https://pbs.twimg.com/ext_tw_video_thumb/69863...  \n",
       "307     https://pbs.twimg.com/media/C2p_wQyXEAELtvS.jpg  "
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_the_dogs.reindex(['tweet_id', 'p1', 'rating', 'favorite_count', 'retweet_count', 'dog_stage', 'name', 'text', 'timestamp', 'jpg_url'], axis=1).sample(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1196, 11)"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_the_dogs.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_master.to_csv('twitter_archive_master.csv', index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Analyzing and Visualizing Data\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Twitter for iPhone     2042\n",
       "Vine - Make a Scene      91\n",
       "Twitter Web Client       31\n",
       "TweetDeck                11\n",
       "Name: source, dtype: int64"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_clean.source.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Source from their iPhone app.\n",
    "plt.style.use('tableau-colorblind10')\n",
    "sns.countplot(data = df_clean, y = 'source')\n",
    "plt.title('the Sources Distribution', fontsize=18)\n",
    "plt.xlabel('count of Tweets ')\n",
    "plt.ylabel('Sources')\n",
    "plt.savefig('tweet-source.png');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>text</th>\n",
       "      <th>The_Rating</th>\n",
       "      <th>name</th>\n",
       "      <th>the_dogs_stage</th>\n",
       "      <th>retweet_count</th>\n",
       "      <th>favorite_count</th>\n",
       "      <th>WeekDay</th>\n",
       "      <th>jpg_url</th>\n",
       "      <th>p1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>305</th>\n",
       "      <td>822872901745569793</td>\n",
       "      <td>2017-01-21 18:26:02+00:00</td>\n",
       "      <td>Here's a super supportive puppo participating ...</td>\n",
       "      <td>13</td>\n",
       "      <td>None</td>\n",
       "      <td>puppo</td>\n",
       "      <td>43057</td>\n",
       "      <td>131457</td>\n",
       "      <td>Sat</td>\n",
       "      <td>https://pbs.twimg.com/media/C2tugXLXgAArJO4.jpg</td>\n",
       "      <td>Lakeland Terrier</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>396</th>\n",
       "      <td>807106840509214720</td>\n",
       "      <td>2016-12-09 06:17:20+00:00</td>\n",
       "      <td>This is Stephan. He just wants to help. 13/10 ...</td>\n",
       "      <td>13</td>\n",
       "      <td>Stephan</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>55699</td>\n",
       "      <td>119076</td>\n",
       "      <td>Fri</td>\n",
       "      <td>https://pbs.twimg.com/ext_tw_video_thumb/80710...</td>\n",
       "      <td>Chihuahua</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>107</th>\n",
       "      <td>866450705531457537</td>\n",
       "      <td>2017-05-22 00:28:40+00:00</td>\n",
       "      <td>This is Jamesy. He gives a kiss to every other...</td>\n",
       "      <td>13</td>\n",
       "      <td>Jamesy</td>\n",
       "      <td>pupper</td>\n",
       "      <td>32440</td>\n",
       "      <td>115143</td>\n",
       "      <td>Mon</td>\n",
       "      <td>https://pbs.twimg.com/media/DAZAUfBXcAAG_Nn.jpg</td>\n",
       "      <td>French Bulldog</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               tweet_id                 timestamp  \\\n",
       "305  822872901745569793 2017-01-21 18:26:02+00:00   \n",
       "396  807106840509214720 2016-12-09 06:17:20+00:00   \n",
       "107  866450705531457537 2017-05-22 00:28:40+00:00   \n",
       "\n",
       "                                                  text  The_Rating     name  \\\n",
       "305  Here's a super supportive puppo participating ...          13     None   \n",
       "396  This is Stephan. He just wants to help. 13/10 ...          13  Stephan   \n",
       "107  This is Jamesy. He gives a kiss to every other...          13   Jamesy   \n",
       "\n",
       "    the_dogs_stage  retweet_count  favorite_count WeekDay  \\\n",
       "305          puppo          43057          131457     Sat   \n",
       "396        Unknown          55699          119076     Fri   \n",
       "107         pupper          32440          115143     Mon   \n",
       "\n",
       "                                               jpg_url                p1  \n",
       "305    https://pbs.twimg.com/media/C2tugXLXgAArJO4.jpg  Lakeland Terrier  \n",
       "396  https://pbs.twimg.com/ext_tw_video_thumb/80710...         Chihuahua  \n",
       "107    https://pbs.twimg.com/media/DAZAUfBXcAAG_Nn.jpg    French Bulldog  "
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_the_dogs.nlargest(3, 'favorite_count')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>text</th>\n",
       "      <th>The_Rating</th>\n",
       "      <th>name</th>\n",
       "      <th>the_dogs_stage</th>\n",
       "      <th>retweet_count</th>\n",
       "      <th>favorite_count</th>\n",
       "      <th>WeekDay</th>\n",
       "      <th>jpg_url</th>\n",
       "      <th>p1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>804</th>\n",
       "      <td>739238157791694849</td>\n",
       "      <td>2016-06-04 23:31:25+00:00</td>\n",
       "      <td>Here's a doggo blowing bubbles. It's downright...</td>\n",
       "      <td>13</td>\n",
       "      <td>None</td>\n",
       "      <td>doggo</td>\n",
       "      <td>56804</td>\n",
       "      <td>113960</td>\n",
       "      <td>Sat</td>\n",
       "      <td>https://pbs.twimg.com/ext_tw_video_thumb/73923...</td>\n",
       "      <td>Eskimo Dog</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>396</th>\n",
       "      <td>807106840509214720</td>\n",
       "      <td>2016-12-09 06:17:20+00:00</td>\n",
       "      <td>This is Stephan. He just wants to help. 13/10 ...</td>\n",
       "      <td>13</td>\n",
       "      <td>Stephan</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>55699</td>\n",
       "      <td>119076</td>\n",
       "      <td>Fri</td>\n",
       "      <td>https://pbs.twimg.com/ext_tw_video_thumb/80710...</td>\n",
       "      <td>Chihuahua</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>305</th>\n",
       "      <td>822872901745569793</td>\n",
       "      <td>2017-01-21 18:26:02+00:00</td>\n",
       "      <td>Here's a super supportive puppo participating ...</td>\n",
       "      <td>13</td>\n",
       "      <td>None</td>\n",
       "      <td>puppo</td>\n",
       "      <td>43057</td>\n",
       "      <td>131457</td>\n",
       "      <td>Sat</td>\n",
       "      <td>https://pbs.twimg.com/media/C2tugXLXgAArJO4.jpg</td>\n",
       "      <td>Lakeland Terrier</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               tweet_id                 timestamp  \\\n",
       "804  739238157791694849 2016-06-04 23:31:25+00:00   \n",
       "396  807106840509214720 2016-12-09 06:17:20+00:00   \n",
       "305  822872901745569793 2017-01-21 18:26:02+00:00   \n",
       "\n",
       "                                                  text  The_Rating     name  \\\n",
       "804  Here's a doggo blowing bubbles. It's downright...          13     None   \n",
       "396  This is Stephan. He just wants to help. 13/10 ...          13  Stephan   \n",
       "305  Here's a super supportive puppo participating ...          13     None   \n",
       "\n",
       "    the_dogs_stage  retweet_count  favorite_count WeekDay  \\\n",
       "804          doggo          56804          113960     Sat   \n",
       "396        Unknown          55699          119076     Fri   \n",
       "305          puppo          43057          131457     Sat   \n",
       "\n",
       "                                               jpg_url                p1  \n",
       "804  https://pbs.twimg.com/ext_tw_video_thumb/73923...        Eskimo Dog  \n",
       "396  https://pbs.twimg.com/ext_tw_video_thumb/80710...         Chihuahua  \n",
       "305    https://pbs.twimg.com/media/C2tugXLXgAArJO4.jpg  Lakeland Terrier  "
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_the_dogs.nlargest(3, 'retweet_count')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 648x648 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# favorites Most famous than retweets.\n",
    "df_master[['favorite_count', 'retweet_count']].plot(style ='.', ylim=[0, 50000], figsize=(9,9))\n",
    "plt.title('count of retweets and favorites through time', size=18)\n",
    "plt.xlabel('Date')\n",
    "plt.xticks([], [])\n",
    "plt.ylabel('count of retweets, favorites')\n",
    "plt.legend(ncol=1, loc='upper right')\n",
    "plt.savefig('retweets-favorites-time.png');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#The count of tweets and the count of favorites are related\n",
    "sns.regplot(x=\"favorite_count\", y=\"retweet_count\", data=df_master, scatter_kws={'alpha':0.4})\n",
    "plt.title('Retweets Vs Favorite ', size=18)\n",
    "plt.xlabel('Favorites') \n",
    "plt.ylabel('Retweets')\n",
    "plt.savefig('retweet-favorite.png');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# the most Names of Dogs is Cooper\n",
    "most_names = df_master.name.value_counts()[1:6].sort_values (axis=0, ascending=True)\n",
    "most_names.plot(kind = 'barh', color='steelblue')\n",
    "plt.title('The Most Common Names of Dogs', size=18)\n",
    "plt.xlabel('Number of Dogs', size=14)\n",
    "plt.ylabel('Name of Dogs', size=14)\n",
    "plt.savefig('top-names.png');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Breeds of Dogs is Golden Retrievers is the most oen\n",
    "most_breeds = df_master.p1.value_counts()[0:5].sort_values(axis=0, ascending=True)\n",
    "most_breeds.plot(kind = 'barh', color=['steelblue'])\n",
    "plt.title(' Most Common Dogs Breeds', size=18)\n",
    "plt.xlabel('count of Dogs')\n",
    "plt.ylabel('Breeds of Dogs')\n",
    "plt.savefig('top-breeds.png');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Monday, the most days when it is twitter\n",
    "Number_tweets = df_master['WeekDay'].value_counts()\n",
    "Number_tweets.plot(kind = 'barh', color='steelblue')\n",
    "plt.title('Number of Tweets for Week Days', size=18)\n",
    "plt.xlabel('count of Tweets')\n",
    "plt.ylabel('Week Days')\n",
    "plt.savefig('WeekDays.png');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#December is the most tweeting month\n",
    "months_t = tweets =df_master['month'].value_counts()\n",
    "months_t.plot(kind = 'barh', color='steelblue')\n",
    "plt.title('count of Tweets for Months', size=18)\n",
    "plt.xlabel('count of Tweets')\n",
    "plt.ylabel('The Months')\n",
    "plt.savefig('month-tweets.png');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# stage of Dogs is pupper is the most oen\n",
    "stage_the_dogs = df_master['the_dogs_stage'].value_counts()[1:6].index\n",
    "sns.countplot(data = df_master, x = 'the_dogs_stage', order = stage_the_dogs , orient = 'h')\n",
    "plt.title('The Most Common Dogs Stage',fontsize=18)\n",
    "plt.xlabel('Stage of Dogs')\n",
    "plt.ylabel('count of Doges')\n",
    "plt.savefig('top-stages.png');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "real dog     1243\n",
       "maybe dog     508\n",
       "not dog       324\n",
       "Name: Dogs_Predictions, dtype: int64"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "i_clean['Dogs_Predictions'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Real dogs is The most Predictions of Doges \n",
    "p_the_dogs = i_clean['Dogs_Predictions'].value_counts().index\n",
    "sns.countplot(data = i_clean, x = 'Dogs_Predictions', order = p_the_dogs , orient = 'h')\n",
    "plt.title('The Predictions of Doges',fontsize=18)\n",
    "plt.xlabel('Type of Dogs')\n",
    "plt.ylabel('count of Doges')\n",
    "plt.savefig('top-stages.png');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
